// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id               Int                @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String             @unique
  password         String
  jobsApplied      Job[]
  about            String?
  country          String?
  image            String?
  position         String?
  city             String?
  online           Boolean @default(false)
  previousPosition PreviousPosition[]
  education        Education[]
  skills           Skills[]
  projects         Projects[]
  accepted         AcceptedCandidate?
  refused          RefusedCandidate?
  proposed         ProposedCandidate?
  contacts         Contacts?
  telegram         Telegram?
  letter           CandidateLetter[]
  rooms            Room[]
  liked            LikedJobs?
  lastSeen         DateTime           @default(now())
  dateCreated      DateTime           @default(now())
  dateUpdated      DateTime           @updatedAt
}

model Recruiter {
  id                Int                 @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String              @unique
  password          String
  companyName       String?
  about             String?
  phone             String?
  linkedIn          String?
  website           String?
  telegram          String?
  country           String?
  city              String?
  street            String?
  image             String?
  online           Boolean @default(false)
  jobsPosted        Job[]
  rooms             Room[]
  acceptedCandidate AcceptedCandidate[]
  refusedCandidates RefusedCandidate[]
  proposedCandidates ProposedCandidate[]
  lastSeen         DateTime           @default(now())
  dateCreated       DateTime            @default(now())
  dateUpdated       DateTime            @updatedAt
}

model Job {
  id                Int                 @id @default(autoincrement())
  companyName       String
  companyWebsite    String
  country           String
  city              String
  title             String
  description       String
  skills            Json
  salary            Int
  condition         String
  recruiterId       Int
  recruiter         Recruiter           @relation(fields: [recruiterId], references: [id])
  candidatesApplied Candidate[]
  acceptedCandidate AcceptedCandidate[]
  refusedCandidate  RefusedCandidate[]
  likedCandidates   LikedJobs[]
  proposedCandidates ProposedCandidate[]
  letters           CandidateLetter[]
  dateCreated       DateTime            @default(now())
  dateUpdated       DateTime            @updatedAt
}

model ProposedCandidate {
  id Int @id @default(autoincrement())
  candidateId  Int         @unique
  candidate    Candidate   @relation(fields: [candidateId], references: [id])
  recruiters Recruiter[]
  proposedJobs Job[]
  dateCreated       DateTime            @default(now())
  dateUpdated       DateTime            @updatedAt
}

model AcceptedCandidate {
  id           Int         @id @default(autoincrement())
  candidateId  Int         @unique
  candidate    Candidate   @relation(fields: [candidateId], references: [id])
  recruiter    Recruiter[]
  jobsAccepted Job[]
  dateCreated  DateTime    @default(now())
  dateUpdated  DateTime    @updatedAt
}

model RefusedCandidate {
  id          Int         @id @default(autoincrement())
  candidateId Int         @unique
  candidate   Candidate   @relation(fields: [candidateId], references: [id])
  recruiter   Recruiter[]
  jobsRefused Job[]
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @updatedAt
}

model LikedJobs {
  id          Int         @id @default(autoincrement())
  candidateId Int         @unique
  candidate   Candidate   @relation(fields: [candidateId], references: [id])
  jobsLiked Job[]
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @updatedAt
}

model CandidateLetter {
  id          Int       @id @default(autoincrement())
  message     String
  candidateId Int
  jobId       Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  job         Job       @relation(fields: [jobId], references: [id])
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
}


model PreviousPosition {
  id          Int       @id @default(autoincrement())
  companyName String
  position    String
  startDate   String
  endDate     String
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
}

model Education {
  id          Int       @id @default(autoincrement())
  schoolName  String
  startDate   String
  endDate     String
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
}

model Skills {
  id          Int       @id @default(autoincrement())
  title       String
  experience  Int
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
}

model Projects {
  id          Int       @id @default(autoincrement())
  title       String
  link        String
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
}

model Contacts {
  id          Int       @id @default(autoincrement())
  email       String?
  phone       String?
  candidateId Int       @unique
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
}

model Chat {
  id          Int      @id @default(autoincrement())
  message     String
  accountType    String
  roomId      Int
  delivered   Boolean @default(false)
  read        Boolean @default(false)
  room        Room     @relation(fields: [roomId], references: [id])
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
}

model Room {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  chats       Chat[]
  candidateId Int
  recruiterId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id])
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
}

model Telegram {
  id Int @id @default(autoincrement())
  chatId Int
  firstName String
  candidateId Int @unique
  candidate Candidate @relation(fields: [candidateId],references: [id])
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
}
